import { c as create_ssr_component, f as add_attribute, d as escape } from "./ssr.js";
/* empty css                                          */
const css = {
  code: ".verse.svelte-hmvbi9{font-family:'me_quran2' !important;direction:rtl}.verse.svelte-hmvbi9 .wordBlock{display:inline-block;margin:0;padding:0;font-family:'me_quran2' !important}.verse.svelte-hmvbi9 .sliced{display:inline-block;margin:0;padding:0;cursor:pointer;font-size:inherit;line-height:inherit;font-family:'me_quran2' !important;position:relative}.verse.svelte-hmvbi9 .selected.sliced{color:#ca56ff;border-bottom:1px dashed;height:87px;padding:0}.verse.svelte-hmvbi9 .sliced span{display:initial}.verse.svelte-hmvbi9 .sliced span[id='char_614']{display:inherit}.verse.svelte-hmvbi9 .sliced.graded{padding:0px 10px !important;border-radius:10px;margin:0 -5px}.verse.svelte-hmvbi9 .sliced.incorrect{background:#ffdcdc}.verse.svelte-hmvbi9 .sliced.correct{background:#daffa2}.verse.svelte-hmvbi9 .sliced.graded + span{z-index:999999;position:relative;right:-4px}.verse.svelte-hmvbi9 .selectedGradedBlock{border-bottom:6px dashed purple !important}.verse.svelte-hmvbi9 .tip{position:absolute;font-size:12px;background:#fff;line-height:normal;width:max-content;text-align:center;bottom:-31px}",
  map: `{"version":3,"file":"VerseSliced.svelte","sources":["VerseSliced.svelte"],"sourcesContent":["<script>\\n\\timport { afterUpdate } from 'svelte';\\n\\n\\tafterUpdate(() => {\\n\\t\\tsanitizeVerse();\\n\\t});\\n\\n\\tlet verseBox;\\n\\tlet selectedSlice;\\n\\tlet selectedSliceIndex;\\n\\texport let tips = true;\\n\\texport let selectSlice;\\n\\texport let clickable = true;\\n\\texport let fontSize = '32px';\\n\\texport let lineHeight = '3.5em';\\n\\texport let textAlign = 'right';\\n\\texport let html;\\n\\tconst ism_tagger = [\\n\\t\\t{\\n\\t\\t\\tcategory: 'specificity',\\n\\t\\t\\tkey: 'Penentuan',\\n\\t\\t\\toptions: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['معرفة'],\\n\\t\\t\\t\\t\\ttag: 'definite'\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['نكرة'],\\n\\t\\t\\t\\t\\ttag: 'indefinite'\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tcategory: 'case',\\n\\t\\t\\tkey: 'Hukum I’rab',\\n\\t\\t\\toptions: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['مرفوع'],\\n\\t\\t\\t\\t\\ttag: \\"Raf'a\\"\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['منصوب'],\\n\\t\\t\\t\\t\\ttag: 'Nasb'\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['مجرور'],\\n\\t\\t\\t\\t\\ttag: 'Jarr'\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tcategory: 'number',\\n\\t\\t\\tkey: 'al-‘dad',\\n\\t\\t\\toptions: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['مفرد'],\\n\\t\\t\\t\\t\\ttag: 'singular'\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['جمع'],\\n\\t\\t\\t\\t\\ttag: 'plural'\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t}\\n\\t];\\n\\n\\tconst fil_tagger = [\\n\\t\\t{\\n\\t\\t\\tcategory: 'tense',\\n\\t\\t\\tkey: 'al-Fi‘l Man Hith al-Zaman (Sorof (Fi‘l))',\\n\\t\\t\\toptions: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['فعل ماض'],\\n\\t\\t\\t\\t\\ttag: 'past'\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['فعل مضارع'],\\n\\t\\t\\t\\t\\ttag: 'present'\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tquery: ['فعل أمر'],\\n\\t\\t\\t\\t\\ttag: 'command'\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t}\\n\\t];\\n\\n\\tfunction sanitizeVerse() {\\n\\t\\tconst spans = verseBox.querySelectorAll('.verse span');\\n\\t\\t// console.log('starting', spans);\\n\\t\\tspans.forEach(function (span) {\\n\\t\\t\\t// console.log({ span });\\n\\t\\t\\t// Check if the content of the span includes a specific text\\n\\t\\t\\tif (span.textContent.includes('ﻴ')) {\\n\\t\\t\\t\\t// span.style.color = 'red';\\n\\t\\t\\t\\tspan.style.display = 'inherit';\\n\\t\\t\\t\\t// Add more styles as needed\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\tfunction handleClick(event) {\\n\\t\\tif (!clickable) return;\\n\\t\\tselectedSlice = event.target.closest('.sliced');\\n\\t\\tconsole.log({ selectedSlice });\\n\\t\\t// selectedSlice.classList.toggle('selected', true);\\n\\n\\t\\tconst words = verseBox.getElementsByClassName('sliced');\\n\\t\\tconst index = Array.from(words).indexOf(selectedSlice);\\n\\t\\t// console.log({ index });\\n\\t\\tselectedSliceIndex = index;\\n\\t\\t// console.log('clicked', blocks[index]);\\n\\n\\t\\tfor (let i = 0; i < words.length; i++) {\\n\\t\\t\\tconst word = words[i];\\n\\t\\t\\tif (i !== selectedSliceIndex) {\\n\\t\\t\\t\\tword.classList.toggle('selected', false);\\n\\t\\t\\t\\tconst elementsToRemove = word.getElementsByClassName('tip');\\n\\n\\t\\t\\t\\t// Remove each child with the specified class\\n\\t\\t\\t\\twhile (elementsToRemove.length > 0) {\\n\\t\\t\\t\\t\\telementsToRemove[0].remove();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tword.classList.toggle('selected', true);\\n\\n\\t\\t\\t\\t// Create a new span element\\n\\t\\t\\t\\tconst newSpan = document.createElement('aside');\\n\\t\\t\\t\\tnewSpan.classList.add('tip');\\n\\n\\t\\t\\t\\t// Set content or attributes for the new span\\n\\t\\t\\t\\tnewSpan.textContent = getTip(word);\\n\\n\\t\\t\\t\\tif (tips) {\\n\\t\\t\\t\\t\\t// Append the new span element to the parent\\n\\t\\t\\t\\t\\tword.appendChild(newSpan);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tlet triggerType = '';\\n\\t\\ttry {\\n\\t\\t\\tconst meta = getAttributesAsArray(selectedSlice).find((m) => m.name === 'class').value;\\n\\t\\t\\tif (meta.includes('ism')) {\\n\\t\\t\\t\\ttriggerType = 'non_verbs';\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttriggerType = 'verbs';\\n\\t\\t\\t}\\n\\t\\t} catch (error) {}\\n\\n\\t\\tselectSlice({\\n\\t\\t\\tslice: selectedSlice,\\n\\t\\t\\tindex: selectedSliceIndex,\\n\\t\\t\\ttriggerType: triggerType\\n\\t\\t});\\n\\n\\t\\tfunction getTip(word) {\\n\\t\\t\\tconst attrs = getAttributesAsArray(word);\\n\\t\\t\\tconsole.log({ attrs });\\n\\t\\t\\tlet tagger;\\n\\t\\t\\tlet fil = false;\\n\\n\\t\\t\\tconst classList = String(word.classList);\\n\\t\\t\\tif (classList.includes('ism')) {\\n\\t\\t\\t\\ttagger = ism_tagger;\\n\\t\\t\\t} else if (classList.includes('fil')) {\\n\\t\\t\\t\\ttagger = fil_tagger;\\n\\t\\t\\t\\tfil = true;\\n\\t\\t\\t}\\n\\t\\t\\treturn analyze(attrs, tagger, fil);\\n\\t\\t}\\n\\n\\t\\tfunction analyze(attrs, tagger, fil) {\\n\\t\\t\\tlet output = [];\\n\\n\\t\\t\\tlet key = 'data-dependencies';\\n\\t\\t\\tif (fil) {\\n\\t\\t\\t\\tkey = 'data-trigger-verb-info';\\n\\t\\t\\t}\\n\\t\\t\\tconst attr = attrs.find((a) => a.name === key);\\n\\n\\t\\t\\tif (attr) {\\n\\t\\t\\t\\tfor (let rule of tagger) {\\n\\t\\t\\t\\t\\tconst val = attr.value[rule.key];\\n\\t\\t\\t\\t\\tconsole.log(rule.key, { rule });\\n\\t\\t\\t\\t\\tconsole.log(val);\\n\\t\\t\\t\\t\\tif (val) {\\n\\t\\t\\t\\t\\t\\tfor (let option of rule.options) {\\n\\t\\t\\t\\t\\t\\t\\tif (option.query.some((element) => val.includes(element))) output.push(option.tag);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn output.join(' - ');\\n\\t\\t}\\n\\n\\t\\tfunction getAttributesAsArray(element) {\\n\\t\\t\\tconst attributesArray = Array.from(element.attributes);\\n\\n\\t\\t\\tconst attributesObjectArray = attributesArray.map((attribute) => {\\n\\t\\t\\t\\tlet value = attribute.value;\\n\\n\\t\\t\\t\\tif (value.indexOf('{') === 0) {\\n\\t\\t\\t\\t\\tvalue = value.replaceAll('=>', ':');\\n\\t\\t\\t\\t\\tconsole.log({ value });\\n\\t\\t\\t\\t\\tconst jsonParsed = JSON.parse(value);\\n\\t\\t\\t\\t\\tconsole.log({ jsonParsed });\\n\\t\\t\\t\\t\\tvalue = jsonParsed;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\tname: attribute.name,\\n\\t\\t\\t\\t\\tvalue: value\\n\\t\\t\\t\\t};\\n\\t\\t\\t});\\n\\n\\t\\t\\tconsole.log({ attributesObjectArray });\\n\\n\\t\\t\\treturn attributesObjectArray;\\n\\t\\t}\\n\\t\\t// if (gradedElement) {\\n\\t\\t// \\t// Log information to the console or perform actions\\n\\t\\t// \\t// console.log('Clicked on a graded block:', gradedElement);\\n\\t\\t// \\tif (verseHTML) {\\n\\t\\t// \\t\\tconst words = verseHTML.getElementsByClassName('sliced');\\n\\t\\t// \\t\\tconst index = Array.from(words).indexOf(gradedElement);\\n\\t\\t// \\t\\tconsole.log({ index });\\n\\t\\t// \\t\\tselectedGradedBlockIndex = index;\\n\\t\\t// \\t\\tconsole.log('clicked', blocks[index]);\\n\\n\\t\\t// \\t\\tfor (let i = 0; i < words.length; i++) {\\n\\t\\t// \\t\\t\\tconst word = words[i];\\n\\t\\t// \\t\\t\\tif (i !== selectedGradedBlockIndex) {\\n\\t\\t// \\t\\t\\t\\tword.classList.toggle('selectedGradedBlock', false);\\n\\t\\t// \\t\\t\\t} else {\\n\\t\\t// \\t\\t\\t\\tword.classList.toggle('selectedGradedBlock', true);\\n\\t\\t// \\t\\t\\t}\\n\\t\\t// \\t\\t}\\n\\t\\t// \\t}\\n\\t\\t// }\\n\\t}\\n<\/script>\\n\\n<!-- svelte-ignore a11y-click-events-have-key-events -->\\n<div\\n\\tclass=\\"verse\\"\\n\\tbind:this={verseBox}\\n\\ton:click={handleClick}\\n\\tstyle=\\"font-size:{fontSize};line-height:{lineHeight};text-align:{textAlign}\\"\\n>\\n\\t{@html html}\\n</div>\\n\\n<style>\\n\\t.verse {\\n\\t\\tfont-family: 'me_quran2' !important;\\n\\t\\tdirection: rtl;\\n\\t}\\n\\n\\t.verse :global(.wordBlock) {\\n\\t\\tdisplay: inline-block;\\n\\t\\tmargin: 0;\\n\\t\\tpadding: 0;\\n\\t\\tfont-family: 'me_quran2' !important;\\n\\t}\\n\\n\\t.verse :global(.sliced) {\\n\\t\\tdisplay: inline-block;\\n\\t\\tmargin: 0;\\n\\t\\tpadding: 0;\\n\\t\\tcursor: pointer;\\n\\t\\tfont-size: inherit;\\n\\t\\tline-height: inherit;\\n\\t\\tfont-family: 'me_quran2' !important;\\n\\t\\tposition: relative;\\n\\t}\\n\\n\\t.verse :global(.selected.sliced) {\\n\\t\\tcolor: #ca56ff;\\n\\t\\tborder-bottom: 1px dashed;\\n\\t\\theight: 87px;\\n\\t\\tpadding: 0;\\n\\t}\\n\\t.verse :global(.sliced span) {\\n\\t\\tdisplay: initial;\\n\\t}\\n\\n\\t.verse :global(.sliced span[id='char_614']) {\\n\\t\\tdisplay: inherit;\\n\\t}\\n\\t.verse :global(.sliced.graded) {\\n\\t\\tpadding: 0px 10px !important;\\n\\t\\tborder-radius: 10px;\\n\\t\\tmargin: 0 -5px;\\n\\t}\\n\\n\\t.verse :global(.sliced.incorrect) {\\n\\t\\tbackground: #ffdcdc;\\n\\t}\\n\\n\\t.verse :global(.sliced.correct) {\\n\\t\\tbackground: #daffa2;\\n\\t}\\n\\n\\t.verse :global(.sliced.graded + span) {\\n\\t\\tz-index: 999999;\\n\\t\\tposition: relative;\\n\\t\\tright: -4px;\\n\\t}\\n\\n\\t.verse :global(.selectedGradedBlock) {\\n\\t\\tborder-bottom: 6px dashed purple !important;\\n\\t}\\n\\n\\t.verse :global(.tip) {\\n\\t\\tposition: absolute;\\n\\t\\tfont-size: 12px;\\n\\t\\tbackground: #fff;\\n\\t\\tline-height: normal;\\n\\t\\twidth: max-content;\\n\\t\\ttext-align: center;\\n\\t\\tbottom: -31px;\\n\\t}\\n</style>\\n"],"names":[],"mappings":"AA8PC,oBAAO,CACN,WAAW,CAAE,WAAW,CAAC,UAAU,CACnC,SAAS,CAAE,GACZ,CAEA,oBAAM,CAAS,UAAY,CAC1B,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,WAAW,CAAC,UAC1B,CAEA,oBAAM,CAAS,OAAS,CACvB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,OAAO,CACf,SAAS,CAAE,OAAO,CAClB,WAAW,CAAE,OAAO,CACpB,WAAW,CAAE,WAAW,CAAC,UAAU,CACnC,QAAQ,CAAE,QACX,CAEA,oBAAM,CAAS,gBAAkB,CAChC,KAAK,CAAE,OAAO,CACd,aAAa,CAAE,GAAG,CAAC,MAAM,CACzB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CACV,CACA,oBAAM,CAAS,YAAc,CAC5B,OAAO,CAAE,OACV,CAEA,oBAAM,CAAS,2BAA6B,CAC3C,OAAO,CAAE,OACV,CACA,oBAAM,CAAS,cAAgB,CAC9B,OAAO,CAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAC5B,aAAa,CAAE,IAAI,CACnB,MAAM,CAAE,CAAC,CAAC,IACX,CAEA,oBAAM,CAAS,iBAAmB,CACjC,UAAU,CAAE,OACb,CAEA,oBAAM,CAAS,eAAiB,CAC/B,UAAU,CAAE,OACb,CAEA,oBAAM,CAAS,qBAAuB,CACrC,OAAO,CAAE,MAAM,CACf,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IACR,CAEA,oBAAM,CAAS,oBAAsB,CACpC,aAAa,CAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,UAClC,CAEA,oBAAM,CAAS,IAAM,CACpB,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,WAAW,CAClB,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,KACT"}`
};
const VerseSliced = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let verseBox;
  let { tips = true } = $$props;
  let { selectSlice } = $$props;
  let { clickable = true } = $$props;
  let { fontSize = "32px" } = $$props;
  let { lineHeight = "3.5em" } = $$props;
  let { textAlign = "right" } = $$props;
  let { html } = $$props;
  if ($$props.tips === void 0 && $$bindings.tips && tips !== void 0) $$bindings.tips(tips);
  if ($$props.selectSlice === void 0 && $$bindings.selectSlice && selectSlice !== void 0) $$bindings.selectSlice(selectSlice);
  if ($$props.clickable === void 0 && $$bindings.clickable && clickable !== void 0) $$bindings.clickable(clickable);
  if ($$props.fontSize === void 0 && $$bindings.fontSize && fontSize !== void 0) $$bindings.fontSize(fontSize);
  if ($$props.lineHeight === void 0 && $$bindings.lineHeight && lineHeight !== void 0) $$bindings.lineHeight(lineHeight);
  if ($$props.textAlign === void 0 && $$bindings.textAlign && textAlign !== void 0) $$bindings.textAlign(textAlign);
  if ($$props.html === void 0 && $$bindings.html && html !== void 0) $$bindings.html(html);
  $$result.css.add(css);
  return ` <div class="verse svelte-hmvbi9" style="${"font-size:" + escape(fontSize, true) + ";line-height:" + escape(lineHeight, true) + ";text-align:" + escape(textAlign, true)}"${add_attribute("this", verseBox, 0)}><!-- HTML_TAG_START -->${html}<!-- HTML_TAG_END --> </div>`;
});
export {
  VerseSliced as V
};
